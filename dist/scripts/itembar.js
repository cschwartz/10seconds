// Generated by CoffeeScript 1.6.3
(function() {
  this.InventoryItem = cc.MenuItemToggle.extend({
    init: function(game, itemBar, description) {
      var button_disabled_item, button_pressed_item, button_unpressed_item;
      this.game = game;
      this.itemBar = itemBar;
      this.description = description;
      button_unpressed_item = cc.MenuItemSprite.create(cc.Sprite.create(button_unpressed));
      button_pressed_item = cc.MenuItemSprite.create(cc.Sprite.create(button_pressed));
      button_disabled_item = cc.MenuItemSprite.create(cc.Sprite.create(button_disabled));
      this.initWithItems([
        button_unpressed_item, button_pressed_item, button_disabled_item, (function() {
          return this.buttonPressed();
        }), this
      ]);
      if (!description) {
        this.setSelectedIndex(2);
        return this.setEnabled(false);
      } else {
        this.description.available = true;
        this.icon = description.type.createIcon(description);
        this.addChild(this.icon, 1);
        return true;
      }
    },
    useAtLocation: function(x, y) {
      if (this.game.addItem(x, y, this.description.type, this.description)) {
        this.description.available = false;
        this.setEnabled(false);
        this.setSelectedIndex(2);
        this.icon.setOpacity(127);
        this.game.setCurrentInventory(void 0);
      }
      return true;
    },
    disable: function() {
      if (this.description.available) {
        return this.setSelectedIndex(0);
      }
    },
    buttonPressed: function() {
      if (this.getSelectedIndex() === 1) {
        this.itemBar.selected(this);
        return this.game.setCurrentInventory(this);
      } else {
        this.itemBar.selected(void 0);
        this.game.setCurrentInventory(void 0);
        return this.setSelectedIndex(0);
      }
    }
  });

  InventoryItem.create = function(game, menu, description) {
    var item;
    item = new InventoryItem();
    item.init(game, menu, description);
    return item;
  };

  this.ItemBar = cc.Node.extend({
    init: function(game, inventory) {
      var i, item, screenSize, _i;
      this._super();
      this.game = game;
      screenSize = cc.Director.getInstance().getWinSize();
      this.menu = cc.Menu.create();
      this.addChild(this.menu);
      this.menu.setPosition(screenSize.width / 2, screenSize.height - 32);
      for (i = _i = 0; _i < 16; i = ++_i) {
        item = InventoryItem.create(game, this, inventory[i]);
        this.menu.addChild(item);
      }
      return this.menu.alignItemsHorizontallyWithPadding(0);
    },
    selected: function(item) {
      if (this.selectedItem) {
        this.selectedItem.disable();
      }
      return this.selectedItem = item;
    }
  });

  ItemBar.create = function(game, inventory) {
    var itemBar;
    itemBar = new ItemBar();
    itemBar.init(game, inventory);
    return itemBar;
  };

}).call(this);
