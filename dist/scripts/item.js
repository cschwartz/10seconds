// Generated by CoffeeScript 1.6.3
(function() {
  this.Item = cc.Sprite.extend({
    init: function(description, map, tile) {
      this._super();
      this.initWithFile(description.type.icon);
      this.setPosition(cc.p(32, 32));
      this.map = map;
      return this.tile = tile;
    },
    getTag: function() {
      return void 0;
    }
  });

  this.ChangeDirection = Item.extend({
    init: function(description, map, tile) {
      this._super(description, map, tile);
      return this.setRotation(description.newDirection);
    },
    interact: function(player, tile) {
      return player.rotate(this.getRotation(), tile);
    }
  });

  ChangeDirection.icon = change_direction;

  ChangeDirection.createIcon = function(description) {
    var icon;
    icon = cc.Sprite.create(description.type.icon);
    icon.setRotation(description.newDirection);
    icon.setPosition(cc.p(32, 32));
    icon.setScale(0.8);
    return icon;
  };

  ChangeDirection.create = function(description, map, tile) {
    var item;
    item = new ChangeDirection();
    item.init(description, map, tile);
    return item;
  };

  this.Goal = Item.extend({
    init: function(description, map, tile) {
      this._super(description, map, tile);
      return this.setScale(0.9);
    },
    interact: function(player, tile) {
      return player.levelComplete();
    }
  });

  Goal.icon = goal;

  Goal.create = function(description, map, tile) {
    var goal;
    goal = new Goal();
    goal.init(description, map, tile);
    return goal;
  };

  this.SpeedUp = Item.extend({
    init: function(description, map, tile) {
      this._super(description, map, tile);
      return this.setRotation(description.direction);
    },
    interact: function(player, tile) {
      return player.speedUp(tile);
    }
  });

  SpeedUp.icon = speedUp;

  SpeedUp.create = function(description, map, tile) {
    var speedUp;
    speedUp = new SpeedUp();
    speedUp.init(description, map, tile);
    return speedUp;
  };

  this.PortalA = Item.extend({
    init: function(description, map, tile) {
      this._super(description, map, tile);
      this.destination = cc.p(description.destinationX, description.destinationY);
      this.oppositePortal = this.map.getItemByTag(PortalB.tag);
      this.closedPortal = cc.Sprite.create(portal_a_closed);
      this.closedPortal.setPosition(cc.p(32, 32));
      this.closedPortal.setOpacity(127);
      this.addChild(this.closedPortal, -1);
      if (this.oppositePortal) {
        this.closedPortal.setVisible(false);
        return this.oppositePortal.otherPortalSpawned(this);
      }
    },
    getTile: function() {
      return this.tile;
    },
    otherPortalSpawned: function(otherPortal) {
      this.closedPortal.setVisible(false);
      this.oppositePortal = otherPortal;
      return this.tile.reprocessItems();
    },
    interact: function(player, tile) {
      if (this.oppositePortal) {
        return player.teleport(this.oppositePortal.getTile().getPosition(), tile);
      }
    },
    getTag: function() {
      return PortalA.tag;
    }
  });

  PortalA.icon = portal_a;

  PortalA.tag = "portal_a";

  PortalA.create = function(description, map, tile) {
    var portal;
    portal = new PortalA();
    portal.init(description, map, tile);
    return portal;
  };

  PortalA.createIcon = function(description) {
    var icon;
    icon = cc.Sprite.create(description.type.icon);
    icon.setPosition(cc.p(32, 32));
    icon.setScale(0.8);
    return icon;
  };

  this.PortalB = Item.extend({
    init: function(description, map, tile) {
      this._super(description, map, tile);
      this.destination = cc.p(description.destinationX, description.destinationY);
      this.closedPortal = cc.Sprite.create(portal_b_closed);
      this.closedPortal.setPosition(cc.p(32, 32));
      this.closedPortal.setOpacity(127);
      this.addChild(this.closedPortal, -1);
      this.oppositePortal = this.map.getItemByTag(PortalA.tag);
      if (this.oppositePortal) {
        this.closedPortal.setVisible(false);
        return this.oppositePortal.otherPortalSpawned(this);
      }
    },
    otherPortalSpawned: function(otherPortal) {
      this.closedPortal.setVisible(false);
      return this.oppositePortal = otherPortal;
    },
    getTile: function() {
      return this.tile;
    },
    getTag: function() {
      return PortalB.tag;
    },
    interact: function(player, tile) {
      if (this.oppositePortal) {
        return player.teleport(this.oppositePortal.getTile().getPosition(), tile);
      }
    }
  });

  PortalB.icon = portal_b;

  PortalB.tag = "portal_b";

  PortalB.create = function(description, map, tile) {
    var portal;
    portal = new PortalB();
    portal.init(description, map, tile);
    return portal;
  };

  PortalB.createIcon = function(description) {
    var icon;
    icon = cc.Sprite.create(description.type.icon);
    icon.setPosition(cc.p(32, 32));
    icon.setScale(0.8);
    return icon;
  };

}).call(this);
