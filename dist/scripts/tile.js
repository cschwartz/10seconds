// Generated by CoffeeScript 1.6.3
(function() {
  this.Tile = cc.Sprite.extend({
    init: function(filename, x, y) {
      this._super();
      this.initWithFile(filename);
      this.setPosition(cc.p(x * 64, y * 64));
      this.setAnchorPoint(cc.p(0, 0));
      return this.items = [];
    },
    addItem: function(item, description) {
      var newItem;
      newItem = item.create(description);
      this.addChild(newItem);
      this.items.push(newItem);
      if (this.currentPlayer) {
        this.itemCompleted(this.currentPlayer);
      }
      return true;
    },
    playerEntered: function(player) {
      this.currentPlayer = player;
      this.currentItemIndex = 0;
      return this.itemCompleted(player);
    },
    itemCompleted: function(player) {
      var currentItem;
      if (this.currentItemIndex < this.items.length) {
        currentItem = this.items[this.currentItem];
        this.handleCurrentItem(player);
        return this.currentItemIndex++;
      } else {
        if (player.canMoveForward()) {
          this.currentPlayer = void 0;
          return player.moveForward();
        }
      }
    },
    handleCurrentItem: function(player) {
      return this.items[this.currentItemIndex].interact(player, this);
    },
    canEnter: function() {
      return true;
    }
  });

  this.EmptyTile = Tile.extend({
    init: function(x, y) {
      return this._super(empty, x, y);
    }
  });

  EmptyTile.create = function(x, y) {
    var tile;
    tile = new EmptyTile();
    tile.init(x, y);
    return tile;
  };

  this.WallTile = Tile.extend({
    init: function(x, y) {
      return this._super(wall, x, y);
    },
    addItem: function(item, description) {
      return false;
    },
    canEnter: function() {
      return false;
    }
  });

  WallTile.create = function(x, y) {
    var tile;
    tile = new WallTile();
    tile.init(x, y);
    return tile;
  };

}).call(this);
