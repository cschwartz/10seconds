// Generated by CoffeeScript 1.6.3
(function() {
  this.Player = cc.Sprite.extend({
    init: function(map, x, y) {
      this._super();
      this.map = map;
      this.initWithFile("player.png");
      this.setPosition(cc.p(x * 64 + 32, y * 64 + 32));
      return this.speed = 1 / 2;
    },
    canMoveForward: function() {
      return this.map.playerCanMoveForward(this);
    },
    moveForward: function() {
      console.log("MovedForward");
      return this.runAction(cc.Sequence.create([
        cc.MoveBy.create(this.speed, this.getRotatedForwardDirection()), cc.CallFunc.create((function() {
          return this.moveComplete();
        }), this)
      ]));
    },
    rotate: function(angle, tile) {
      var angleToRotate;
      angleToRotate = (angle - this.getRotation()) % 360;
      if (angleToRotate < 0) {
        angleToRotate += 360;
      }
      return this.runAction(cc.Sequence.create([
        cc.RotateBy.create(this.speed, angleToRotate), cc.CallFunc.create((function() {
          return this.itemCompleted(tile);
        }), this)
      ]));
    },
    getTilePosition: function() {
      return cc.p(Math.floor(this.getPositionX() / 64), Math.floor(this.getPositionY() / 64));
    },
    getNextTilePosition: function() {
      var nextPixelPosition;
      nextPixelPosition = cc.pAdd(this.getPosition(), this.getRotatedForwardDirection());
      return cc.p(Math.floor(nextPixelPosition.x / 64), Math.floor(nextPixelPosition.y / 64));
    },
    getRotatedForwardDirection: function() {
      var angle, forward, rotatedDirection;
      forward = cc.p(0, 64);
      angle = this.getRotation();
      return rotatedDirection = cc.pRotateByAngle(forward, cc.p(0, 0), cc.DEGREES_TO_RADIANS(-angle));
    },
    itemCompleted: function(tile) {
      return tile.itemCompleted(this);
    },
    moveComplete: function() {
      return this.map.playerMoveCompleted(this);
    }
  });

  Player.create = function(map, x, y) {
    var player;
    player = new Player();
    player.init(map, x, y);
    return player;
  };

  this.GameLayer = cc.Layer.extend({
    init: function() {
      this._super();
      this.map = MapOne.create();
      this.addChild(this.map);
      this.player = Player.create(this.map, 1, 1);
      this.addChild(this.player);
      this.schedule(this.update);
      this.isRunning = false;
      this.setTouchEnabled(true);
      return true;
    },
    update: function(dt) {
      if (!this.isRunning) {
        this.isRunning = true;
        return this.player.moveForward();
      }
    },
    createLevel: function(levelName) {
      return true;
    },
    menuCloseCallback: function(sender) {
      return true;
    },
    onTouchesBegan: function(touches, events) {
      return true;
    },
    onTouchesMoved: function(touches, event) {
      return true;
    },
    onTouchesEnded: function(touches, event) {
      return true;
    },
    onTouchesCancelled: function(touches, event) {
      return true;
    }
  });

  this.TenSecondsScene = cc.Scene.extend({
    onEnter: function() {
      var layer;
      this._super();
      layer = new GameLayer();
      layer.init();
      return this.addChild(layer);
    }
  });

}).call(this);
