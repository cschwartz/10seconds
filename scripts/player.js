// Generated by CoffeeScript 1.6.3
(function() {
  this.Player = cc.Sprite.extend({
    init: function(game, map) {
      var playerStart;
      this._super();
      this.game = game;
      this.map = map;
      this.initWithFile("player.png");
      playerStart = this.map.getPlayerStart();
      this.setPosition(cc.p(playerStart.x * 64 + 32, playerStart.y * 64 + 32));
      this.setRotation(playerStart.rotation);
      return this.speed = 1 / 4;
    },
    canMoveForward: function() {
      return this.map.playerCanMoveForward(this);
    },
    moveForward: function() {
      return this.runAction(cc.Sequence.create([
        cc.MoveBy.create(this.speed, this.getRotatedForwardDirection()), cc.CallFunc.create((function() {
          return this.moveComplete();
        }), this)
      ]));
    },
    rotate: function(angle, tile) {
      var angleToRotate;
      angleToRotate = (angle - this.getRotation()) % 360;
      if (Math.abs(angleToRotate) > 180) {
        if (angleToRotate > 0) {
          angleToRotate -= 360;
        } else {
          angleToRotate += 360;
        }
      }
      if (angleToRotate !== 0) {
        return this.runAction(cc.Sequence.create([
          cc.RotateBy.create(this.speed, angleToRotate), cc.CallFunc.create((function() {
            return this.itemCompleted(tile);
          }), this)
        ]));
      } else {
        return this.runAction(cc.Sequence.create([
          cc.CallFunc.create((function() {
            return this.itemCompleted(tile);
          }), this)
        ]));
      }
    },
    getTilePosition: function() {
      return cc.p(Math.floor(this.getPositionX() / 64), Math.floor(this.getPositionY() / 64));
    },
    getNextTilePosition: function() {
      var nextPixelPosition;
      nextPixelPosition = cc.pAdd(this.getPosition(), this.getRotatedForwardDirection());
      return cc.p(Math.floor(nextPixelPosition.x / 64), Math.floor(nextPixelPosition.y / 64));
    },
    getRotatedForwardDirection: function() {
      var angle, forward, rotatedDirection;
      forward = cc.p(0, 64);
      angle = this.getRotation();
      return rotatedDirection = cc.pRotateByAngle(forward, cc.p(0, 0), cc.DEGREES_TO_RADIANS(-angle));
    },
    itemCompleted: function(tile) {
      return tile.itemCompleted(this);
    },
    moveComplete: function() {
      return this.map.playerMoveCompleted(this);
    },
    levelComplete: function() {
      return this.game.levelComplete();
    }
  });

  Player.create = function(game, map, x, y) {
    var player;
    player = new Player();
    player.init(game, map, x, y);
    return player;
  };

}).call(this);
